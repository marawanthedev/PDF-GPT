// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id      String    @id @unique // synced with kinde user id
  email   String    @unique
  File    File[]
  Message Message[]

  stripeCustomerId      String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId  String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId         String?   @map(name: "stripe_price_id")
  stripCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?
  messages     Message[]
}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isUserMessage Boolean
  User          User?    @relation(fields: [userId], references: [id])
  userId        String?
  File          File?    @relation(fields: [fileId], references: [id])
  fileId        String?
}
